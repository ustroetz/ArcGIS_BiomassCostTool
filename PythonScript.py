# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# PythonScript.py
# Created on: 2013-10-31 09:16:36.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: PythonScript <Inventory_Features> <Destination_Feature> <Operable_Areas_> <Access_Points_to_Operable_Areas> <Price_Stratum_Table__per_ton_> <Price_Transportation__per_ton_per_mile_> <Price_Harvest__per_acre_> <Price_Harvest__per_ton_> <Price_Reforestation__per_acre_> <Distance_Factor_Not_Operable_Areas> <Output_Location> 
# Description: 
# ---------------------------------------------------------------------------

# Set the necessary product code
# import arcinfo


# Import arcpy module
import arcpy

# Load required toolboxes
arcpy.ImportToolbox("Model Functions")
arcpy.ImportToolbox("Cost Analyst Tools.tbx")

# Script arguments
Inventory_Features = arcpy.GetParameterAsText(0)

Destination_Feature = arcpy.GetParameterAsText(1)

Operable_Areas_ = arcpy.GetParameterAsText(2)

Access_Points_to_Operable_Areas = arcpy.GetParameterAsText(3)

Price_Stratum_Table__per_ton_ = arcpy.GetParameterAsText(4)

Price_Transportation__per_ton_per_mile_ = arcpy.GetParameterAsText(5)
if Price_Transportation__per_ton_per_mile_ == '#' or not Price_Transportation__per_ton_per_mile_:
    Price_Transportation__per_ton_per_mile_ = "0.505" # provide a default value if unspecified

Price_Harvest__per_acre_ = arcpy.GetParameterAsText(6)
if Price_Harvest__per_acre_ == '#' or not Price_Harvest__per_acre_:
    Price_Harvest__per_acre_ = "200" # provide a default value if unspecified

Price_Harvest__per_ton_ = arcpy.GetParameterAsText(7)
if Price_Harvest__per_ton_ == '#' or not Price_Harvest__per_ton_:
    Price_Harvest__per_ton_ = "10" # provide a default value if unspecified

Price_Reforestation__per_acre_ = arcpy.GetParameterAsText(8)
if Price_Reforestation__per_acre_ == '#' or not Price_Reforestation__per_acre_:
    Price_Reforestation__per_acre_ = "0" # provide a default value if unspecified

Distance_Factor_Not_Operable_Areas = arcpy.GetParameterAsText(9)
if Distance_Factor_Not_Operable_Areas == '#' or not Distance_Factor_Not_Operable_Areas:
    Distance_Factor_Not_Operable_Areas = "10" # provide a default value if unspecified

Output_Location = arcpy.GetParameterAsText(10)

# Local variables:
inventory_layer_Layer = Inventory_Features
inventory_layer_Layer__2_ = inventory_layer_Layer
inventory_layer_CopyFeatures__6_ = inventory_layer_Layer__2_
inventory_layer_CopyFeatures__4_ = inventory_layer_CopyFeatures__6_
inventory_layer_CopyFeatures = inventory_layer_CopyFeatures__4_
inventory_layer_CopyFeatures__5_ = inventory_layer_CopyFeatures
inventory_layer_access = inventory_layer_CopyFeatures__5_
statisticssum = inventory_layer_access
Value = statisticssum
inventory_layer_no_access = Value
mee = inventory_layer_no_access
inventory_layer_wdistance__2_ = mee
inventory_layer_wdistance__5_ = inventory_layer_wdistance__2_
inventory_layer_wdistance__3_ = inventory_layer_wdistance__5_
Output_Feature_Class__2_ = inventory_layer_wdistance__3_
inventory_layer_wdistance__6_ = Output_Feature_Class__2_
fbks_inventory__2_ = inventory_layer_wdistance__6_
Output_Layer = fbks_inventory__2_
Output_Layer_Name__2_ = Output_Layer
Output_Feature_Clas = Output_Layer_Name__2_
testvier__2_ = Output_Feature_Clas
testvier__3_ = testvier__2_
Output_Feature_Class = testvier__3_
Output_Feature_Class__12_ = Output_Feature_Class
inventory_layer_CopyFeaturesspasf = inventory_layer_CopyFeatures__6_
in_memory = inventory_layer_CopyFeaturesspasf
Output_Values = in_memory
inventory_layer_accessible_wdistance = Output_Values
fbks_stands_Erase = inventory_layer_CopyFeatures__6_
inventory_layer_not_accessible_areas_centroid = fbks_stands_Erase
distance_not_accessible = inventory_layer_not_accessible_areas_centroid
inventory_layer_not_accessible_areas__3_ = distance_not_accessible
inventory_layer_not_accessible_areas__2_ = inventory_layer_not_accessible_areas__3_
access_points__2_ = Access_Points_to_Operable_Areas
Output_Feature_Class__6_ = access_points__2_
Output_Feature_Class__7_ = Output_Feature_Class__6_
Output_Feature_Class__8_ = Output_Feature_Class__7_
access_points = Output_Feature_Class__8_
TRANSPORT_PRICE_TON_MILE = Price_Transportation__per_ton_per_mile_
HARVEST_PRICE_ACRE = Price_Harvest__per_acre_
HARVEST_PRICE_TON = Price_Harvest__per_ton_
REFORESTATION_PRICE_ACRE = Price_Reforestation__per_acre_
in_memory__2_ = "in_memory"
operable_areas__2_ = Operable_Areas_
Output_Feature_Class__3_ = operable_areas__2_
area_accessible_stands = Output_Feature_Class__3_
Output_Feature_Class__5_ = area_accessible_stands
operable_areas = Output_Feature_Class__5_
Faktor = Distance_Factor_Not_Operable_Areas

# Process: Make Feature Layer
arcpy.MakeFeatureLayer_management(Inventory_Features, inventory_layer_Layer, "", "", "OBJECTID OBJECTID VISIBLE NONE;Shape Shape VISIBLE NONE;STRATUM STRATUM VISIBLE NONE;ACRES ACRES VISIBLE NONE;Date_Typed Date_Typed VISIBLE NONE;Density_Ca Density_Ca VISIBLE NONE;Veg_Call Veg_Call VISIBLE NONE;Size_Call Size_Call VISIBLE NONE;Veg_Code Veg_Code VISIBLE NONE;Shape_Leng Shape_Leng VISIBLE NONE;Gross_CF Gross_CF VISIBLE NONE;Net_BF Net_BF VISIBLE NONE;Tons_Acre Tons_Acre VISIBLE NONE;Stand_Tons Stand_Tons VISIBLE NONE;Stand_CF Stand_CF VISIBLE NONE;Stand_BF Stand_BF VISIBLE NONE;Shape_Length Shape_Length VISIBLE NONE;Shape_Area Shape_Area VISIBLE NONE")

# Process: Copy Features (4)
arcpy.CopyFeatures_management(Operable_Areas_, operable_areas__2_, "", "0", "0", "0")

# Process: Add Field (2)
arcpy.AddField_management(operable_areas__2_, "zwischen", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field (7)
arcpy.CalculateField_management(Output_Feature_Class__3_, "zwischen", "'area'", "PYTHON", "")

# Process: Calculate Field (8)
arcpy.CalculateField_management(area_accessible_stands, "AREA", "[ZWISCHEN]&[AREA]", "VB", "")

# Process: Delete Field
arcpy.DeleteField_management(Output_Feature_Class__5_, "zwischen")

# Process: Select Layer By Location
arcpy.SelectLayerByLocation_management(inventory_layer_Layer, "INTERSECT", operable_areas, "", "NEW_SELECTION")

# Process: Copy Features
arcpy.CopyFeatures_management(inventory_layer_Layer__2_, inventory_layer_CopyFeatures__6_, "", "0", "0", "0")

# Process: Spatial Join
arcpy.SpatialJoin_analysis(inventory_layer_CopyFeatures__6_, operable_areas, inventory_layer_CopyFeaturesspasf, "JOIN_ONE_TO_ONE", "KEEP_ALL", "STRATUM \"STRATUM\" true true false 2 Short 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,STRATUM,-1,-1;ACRES \"ACRES\" true true false 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,ACRES,-1,-1;Date_Typed \"Date_Typed\" true true false 50 Text 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Date_Typed,-1,-1;Density_Ca \"Density_Ca\" true true false 50 Text 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Density_Ca,-1,-1;Veg_Call \"Veg_Call\" true true false 50 Text 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Veg_Call,-1,-1;Size_Call \"Size_Call\" true true false 50 Text 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Size_Call,-1,-1;Veg_Code \"Veg_Code\" true true false 6 Text 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Veg_Code,-1,-1;Shape_Leng \"Shape_Leng\" true true false 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Shape_Leng,-1,-1;Gross_CF \"Gross_CF\" true true false 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Gross_CF,-1,-1;Net_BF \"Net_BF\" true true false 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Net_BF,-1,-1;Tons_Acre \"Tons_Acre\" true true false 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Tons_Acre,-1,-1;Stand_Tons \"Stand_Tons\" true true false 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Stand_Tons,-1,-1;Stand_CF \"Stand_CF\" true true false 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Stand_CF,-1,-1;Stand_BF \"Stand_BF\" true true false 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Stand_BF,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,Shape_Area,-1,-1", "INTERSECT", "", "")

# Process: Split
arcpy.Split_analysis(inventory_layer_CopyFeaturesspasf, operable_areas, "AREA", in_memory__2_, "")

# Process: Copy Features (3)
arcpy.CopyFeatures_management(Access_Points_to_Operable_Areas, access_points__2_, "", "0", "0", "0")

# Process: Add Field (3)
arcpy.AddField_management(access_points__2_, "zwischen", "TEXT", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field (9)
arcpy.CalculateField_management(Output_Feature_Class__6_, "zwischen", "'area'", "PYTHON", "")

# Process: Calculate Field (10)
arcpy.CalculateField_management(Output_Feature_Class__7_, "AREA", "[ZWISCHEN]&[AREA]", "VB", "")

# Process: Delete Field (2)
arcpy.DeleteField_management(Output_Feature_Class__8_, "zwischen")

# Process: subone
arcpy.gp.toolbox = "U:/My Documents/ArcGIS_BiomassCostTool/Cost Analyst Tools.tbx";
# Warning: the toolbox U:/My Documents/ArcGIS_BiomassCostTool/Cost Analyst Tools.tbx DOES NOT have an alias. 
# Please assign this toolbox an alias to avoid tool name collisions
# And replace arcpy.gp.subone(...) with arcpy.subone_ALIAS(...)
arcpy.gp.subone(in_memory, access_points)

# Process: Merge
arcpy.Merge_management(Output_Values, inventory_layer_accessible_wdistance, "ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0 ,First,#,in_memory\\copyFeatureClass_FeatureToPoint,ORIG_FID,-1,-1;DISTANCE \"DISTANCE\" true true false 8 Double 0 0 ,First,#,in_memory\\copyFeatureClass_FeatureToPoint,DISTANCE,-1,-1")

# Process: Join Field (3)
arcpy.JoinField_management(inventory_layer_CopyFeatures__6_, "OBJECTID", inventory_layer_accessible_wdistance, "TARGET_FID", "DISTANCE;AREA")

# Process: Join Field (2)
arcpy.JoinField_management(inventory_layer_CopyFeatures__4_, "AREA", access_points, "AREA", "DIST_MILES")

# Process: Add Field (DISTANCE_FINAL)
arcpy.AddField_management(inventory_layer_CopyFeatures, "DISTANCE_FINAL", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field
arcpy.CalculateField_management(inventory_layer_CopyFeatures__5_, "DISTANCE_FINAL", "[DIST_MILES]+[DISTANCE]/1609.344 ", "VB", "")

# Process: Erase
arcpy.Erase_analysis(Inventory_Features, inventory_layer_CopyFeatures__6_, fbks_stands_Erase, "")

# Process: Feature To Point
arcpy.FeatureToPoint_management(fbks_stands_Erase, inventory_layer_not_accessible_areas_centroid, "CENTROID")

# Process: Point Distance
arcpy.PointDistance_analysis(inventory_layer_not_accessible_areas_centroid, Destination_Feature, distance_not_accessible, "")

# Process: Join Field
arcpy.JoinField_management(fbks_stands_Erase, "OBJECTID", distance_not_accessible, "INPUT_FID", "DISTANCE")

# Process: Add Field 2 - DISTANCE_FINAL
arcpy.AddField_management(inventory_layer_not_accessible_areas__3_, "DISTANCE_FINAL", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Collect Values (5)
arcpy.CollectValues_mb("10")

# Process: Summary Statistics
arcpy.Statistics_analysis(inventory_layer_access, statisticssum, "DISTANCE_FINAL MAX", "")

# Process: Get Field Value
arcpy.GetFieldValue_mb(statisticssum, "MAX_DISTANCE_FINAL", "Double", "0")

# Process: Calculate Field (2)
arcpy.CalculateField_management(inventory_layer_not_accessible_areas__2_, "DISTANCE_FINAL", "[DISTANCE]/1609.344+(%Value%*%Faktor%)", "VB", "")

# Process: Merge (2)
arcpy.Merge_management("in_memory\\inventory_layer_CopyFeatures;in_memory\\fbks_stands_Erase", mee, "STRATUM \"STRATUM\" true true false 2 Short 0 0 ,First,#,in_memory\\fbks_stands_Erase,STRATUM,-1,-1,in_memory\\inventory_layer_CopyFeatures,STRATUM,-1,-1;ACRES \"ACRES\" true true false 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,ACRES,-1,-1,in_memory\\inventory_layer_CopyFeatures,ACRES,-1,-1;Date_Typed \"Date_Typed\" true true false 50 Text 0 0 ,First,#,in_memory\\fbks_stands_Erase,Date_Typed,-1,-1,in_memory\\inventory_layer_CopyFeatures,Date_Typed,-1,-1;Density_Ca \"Density_Ca\" true true false 50 Text 0 0 ,First,#,in_memory\\fbks_stands_Erase,Density_Ca,-1,-1,in_memory\\inventory_layer_CopyFeatures,Density_Ca,-1,-1;Veg_Call \"Veg_Call\" true true false 50 Text 0 0 ,First,#,in_memory\\fbks_stands_Erase,Veg_Call,-1,-1,in_memory\\inventory_layer_CopyFeatures,Veg_Call,-1,-1;Size_Call \"Size_Call\" true true false 50 Text 0 0 ,First,#,in_memory\\fbks_stands_Erase,Size_Call,-1,-1,in_memory\\inventory_layer_CopyFeatures,Size_Call,-1,-1;Veg_Code \"Veg_Code\" true true false 6 Text 0 0 ,First,#,in_memory\\fbks_stands_Erase,Veg_Code,-1,-1,in_memory\\inventory_layer_CopyFeatures,Veg_Code,-1,-1;Shape_Leng \"Shape_Leng\" true true false 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,Shape_Leng,-1,-1,in_memory\\inventory_layer_CopyFeatures,Shape_Leng,-1,-1;Gross_CF \"Gross_CF\" true true false 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,Gross_CF,-1,-1,in_memory\\inventory_layer_CopyFeatures,Gross_CF,-1,-1;Net_BF \"Net_BF\" true true false 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,Net_BF,-1,-1,in_memory\\inventory_layer_CopyFeatures,Net_BF,-1,-1;Tons_Acre \"Tons_Acre\" true true false 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,Tons_Acre,-1,-1,in_memory\\inventory_layer_CopyFeatures,Tons_Acre,-1,-1;Stand_Tons \"Stand_Tons\" true true false 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,Stand_Tons,-1,-1,in_memory\\inventory_layer_CopyFeatures,Stand_Tons,-1,-1;Stand_CF \"Stand_CF\" true true false 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,Stand_CF,-1,-1,in_memory\\inventory_layer_CopyFeatures,Stand_CF,-1,-1;Stand_BF \"Stand_BF\" true true false 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,Stand_BF,-1,-1,in_memory\\inventory_layer_CopyFeatures,Stand_BF,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,Shape_Length,-1,-1,in_memory\\fbks_stands_Erase,Shape_length,-1,-1,in_memory\\inventory_layer_CopyFeatures,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,Shape_Area,-1,-1,in_memory\\fbks_stands_Erase,Shape_area,-1,-1,in_memory\\inventory_layer_CopyFeatures,Shape_Area,-1,-1;DISTANCE \"DISTANCE\" true true false 8 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,DISTANCE,-1,-1,in_memory\\inventory_layer_CopyFeatures,DISTANCE,-1,-1;DISTANCE_FINAL \"DISTANCE_FINAL\" true true false 0 Double 0 0 ,First,#,in_memory\\fbks_stands_Erase,DISTANCE_FINAL,-1,-1,in_memory\\inventory_layer_CopyFeatures,DISTANCE_FINAL,-1,-1;AREA \"AREA\" true true false 0 Long 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,AREA,-1,-1;DIST_MILES \"DIST_MILES\" true true false 8 Double 0 0 ,First,#,in_memory\\inventory_layer_CopyFeatures,DIST_MILES,-1,-1")

# Process: Add Field (TRANSPORT_PRICE)
arcpy.AddField_management(mee, "TRANSPORT_PRICE", "DOUBLE", "", "2", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Collect Values
arcpy.CollectValues_mb("0.505")

# Process: Calculate Field (3)
arcpy.CalculateField_management(inventory_layer_wdistance__2_, "TRANSPORT_PRICE", "price", "VB", "dim price\\n\\nif %TRANSPORT_PRICE_TON_MILE% <> 0 and [DISTANCE_FINAL] <> 0 then\\n price = [DISTANCE_FINAL]*%TRANSPORT_PRICE_TON_MILE%\\nelse\\n price = 0\\nend if")

# Process: Add Field (REFORESTATION_PRICE)
arcpy.AddField_management(inventory_layer_wdistance__5_, "REFORESTATION_PRICE", "DOUBLE", "", "2", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Collect Values (4)
arcpy.CollectValues_mb("0")

# Process: Calculate Field (4)
arcpy.CalculateField_management(inventory_layer_wdistance__3_, "REFORESTATION_PRICE", "price", "VB", "dim price\\n\\nif %REFORESTATION_PRICE_ACRE% <> 0 and [Tons_Acre] <> 0 then\\n price = %REFORESTATION_PRICE_ACRE%/ [Tons_Acre] \\nelse\\n price = 0\\nend if")

# Process: Add Field (HARVEST_PRICE)
arcpy.AddField_management(Output_Feature_Class__2_, "HARVEST_PRICE", "DOUBLE", "", "2", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Collect Values (2)
arcpy.CollectValues_mb("200")

# Process: Collect Values (3)
arcpy.CollectValues_mb("10")

# Process: Calculate Field (5)
arcpy.CalculateField_management(inventory_layer_wdistance__6_, "HARVEST_PRICE", "price", "VB", "dim price\\n\\nif %HARVEST_PRICE_TON% <> 0 and [Tons_Acre] <> 0 and %HARVEST_PRICE_ACRE% <> 0  then \\n price = %HARVEST_PRICE_TON%+%HARVEST_PRICE_ACRE%/[Tons_Acre]\\nelseif %HARVEST_PRICE_TON% <> 0 and  [Tons_Acre] <> 0 and  %HARVEST_PRICE_ACRE% = 0  then \\n price = %HARVEST_PRICE_TON%\\nelseif %HARVEST_PRICE_TON% <> 0 and  [Tons_Acre] <> 0 and  %HARVEST_PRICE_ACRE% = 0  then \\n price = %HARVEST_PRICE_ACRE%/[Tons_Acre]\\nelseif %HARVEST_PRICE_TON% = 0 and  [Tons_Acre] <> 0 and  %HARVEST_PRICE_ACRE% = 0  then \\n price = 0\\nelseif %HARVEST_PRICE_TON% = 0 and  [Tons_Acre] = 0 and  %HARVEST_PRICE_ACRE% = 0  then \\n price = 0\\nelse [Tons_Acre] = 0\\n price = 0\\nend if")

# Process: Make Feature Layer (2)
arcpy.MakeFeatureLayer_management(fbks_inventory__2_, Output_Layer, "", "", "STRATUM STRATUM VISIBLE NONE;ACRES ACRES VISIBLE NONE;Date_Typed Date_Typed VISIBLE NONE;Density_Ca Density_Ca VISIBLE NONE;Veg_Call Veg_Call VISIBLE NONE;Size_Call Size_Call VISIBLE NONE;Veg_Code Veg_Code VISIBLE NONE;Shape_Leng Shape_Leng VISIBLE NONE;Gross_CF Gross_CF VISIBLE NONE;Net_BF Net_BF VISIBLE NONE;Tons_Acre Tons_Acre VISIBLE NONE;Stand_Tons Stand_Tons VISIBLE NONE;Stand_CF Stand_CF VISIBLE NONE;Stand_BF Stand_BF VISIBLE NONE;Shape_Length Shape_Length VISIBLE NONE;Shape_Area Shape_Area VISIBLE NONE;DISTANCE DISTANCE VISIBLE NONE;DISTANCE_FINAL DISTANCE_FINAL VISIBLE NONE;AREA AREA VISIBLE NONE;DIST_MILES DIST_MILES VISIBLE NONE;TRANSPORT_PRICE TRANSPORT_PRICE VISIBLE NONE;REFORESTATION_PRICE REFORESTATION_PRICE VISIBLE NONE;HARVEST_PRICE HARVEST_PRICE VISIBLE NONE")

# Process: Add Join
arcpy.AddJoin_management(Output_Layer, "STRATUM", Price_Stratum_Table__per_ton_, "STRATUM", "KEEP_ALL")

# Process: Copy Features (2)
arcpy.CopyFeatures_management(Output_Layer_Name__2_, Output_Feature_Clas, "", "0", "0", "0")

# Process: Add Field
arcpy.AddField_management(Output_Feature_Clas, "PRICE_TOTAL", "DOUBLE", "", "", "", "", "NULLABLE", "NON_REQUIRED", "")

# Process: Calculate Field (6)
arcpy.CalculateField_management(testvier__2_, "PRICE_TOTAL", "[stumpage_price__STUMPAGE_PRICE_TON] + [merge_TRANSPORT_PRICE] + [merge_REFORESTATION_PRICE] + [merge_HARVEST_PRICE]", "VB", "")

# Process: Sort
arcpy.Sort_management(testvier__3_, Output_Feature_Class, "PRICE_TOTAL ASCENDING", "UR")

# Process: Feature Class to Feature Class
arcpy.FeatureClassToFeatureClass_conversion(Output_Feature_Class, Output_Location, "Biomass_Price", "", "", "")

